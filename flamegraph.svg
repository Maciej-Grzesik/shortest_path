<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="274111200790"><g><title>[libc.so.6] (55,028,637 samples, 0.02%)</title><rect x="0.0003%" y="293" width="0.0201%" height="15" fill="rgb(227,0,7)" fg:x="715278" fg:w="55028637"/><text x="0.2503%" y="303.50"></text></g><g><title>[libc.so.6] (55,028,637 samples, 0.02%)</title><rect x="0.0003%" y="277" width="0.0201%" height="15" fill="rgb(217,0,24)" fg:x="715278" fg:w="55028637"/><text x="0.2503%" y="287.50"></text></g><g><title>[libc.so.6] (385,620,406 samples, 0.14%)</title><rect x="0.1452%" y="117" width="0.1407%" height="15" fill="rgb(221,193,54)" fg:x="398022343" fg:w="385620406"/><text x="0.3952%" y="127.50"></text></g><g><title>[libc.so.6] (128,483,687 samples, 0.05%)</title><rect x="0.2390%" y="101" width="0.0469%" height="15" fill="rgb(248,212,6)" fg:x="655159062" fg:w="128483687"/><text x="0.4890%" y="111.50"></text></g><g><title>cfree (627,686,393 samples, 0.23%)</title><rect x="0.0668%" y="149" width="0.2290%" height="15" fill="rgb(208,68,35)" fg:x="183185699" fg:w="627686393"/><text x="0.3168%" y="159.50"></text></g><g><title>[libc.so.6] (567,877,398 samples, 0.21%)</title><rect x="0.0886%" y="133" width="0.2072%" height="15" fill="rgb(232,128,0)" fg:x="242994694" fg:w="567877398"/><text x="0.3386%" y="143.50"></text></g><g><title>__rdl_dealloc (36,214,589 samples, 0.01%)</title><rect x="32.2293%" y="133" width="0.0132%" height="15" fill="rgb(207,160,47)" fg:x="88344103514" fg:w="36214589"/><text x="32.4793%" y="143.50"></text></g><g><title>__rust_dealloc (141,873,866 samples, 0.05%)</title><rect x="32.2425%" y="133" width="0.0518%" height="15" fill="rgb(228,23,34)" fg:x="88380318103" fg:w="141873866"/><text x="32.4925%" y="143.50"></text></g><g><title>cfree (929,079,634 samples, 0.34%)</title><rect x="32.2943%" y="133" width="0.3389%" height="15" fill="rgb(218,30,26)" fg:x="88522191969" fg:w="929079634"/><text x="32.5443%" y="143.50"></text></g><g><title>[libc.so.6] (590,876,755 samples, 0.22%)</title><rect x="32.4176%" y="117" width="0.2156%" height="15" fill="rgb(220,122,19)" fg:x="88860394848" fg:w="590876755"/><text x="32.6676%" y="127.50"></text></g><g><title>[libc.so.6] (46,392,810 samples, 0.02%)</title><rect x="32.6163%" y="101" width="0.0169%" height="15" fill="rgb(250,228,42)" fg:x="89404878793" fg:w="46392810"/><text x="32.8663%" y="111.50"></text></g><g><title>__rdl_realloc (205,557,033 samples, 0.07%)</title><rect x="95.2538%" y="85" width="0.0750%" height="15" fill="rgb(240,193,28)" fg:x="261101315371" fg:w="205557033"/><text x="95.5038%" y="95.50"></text></g><g><title>__rust_realloc (40,021,460 samples, 0.01%)</title><rect x="95.3337%" y="85" width="0.0146%" height="15" fill="rgb(216,20,37)" fg:x="261320402798" fg:w="40021460"/><text x="95.5837%" y="95.50"></text></g><g><title>malloc (142,024,384 samples, 0.05%)</title><rect x="95.3483%" y="85" width="0.0518%" height="15" fill="rgb(206,188,39)" fg:x="261360424258" fg:w="142024384"/><text x="95.5983%" y="95.50"></text></g><g><title>[libc.so.6] (5,360,811,070 samples, 1.96%)</title><rect x="96.0888%" y="53" width="1.9557%" height="15" fill="rgb(217,207,13)" fg:x="263390284411" fg:w="5360811070"/><text x="96.3388%" y="63.50">[..</text></g><g><title>[libc.so.6] (1,631,666,662 samples, 0.60%)</title><rect x="97.4493%" y="37" width="0.5953%" height="15" fill="rgb(231,73,38)" fg:x="267119428819" fg:w="1631666662"/><text x="97.6993%" y="47.50"></text></g><g><title>dijkstra::core::graph::DiGraphMap&lt;N,W&gt;::all_edges (179,336,568,773 samples, 65.42%)</title><rect x="32.6332%" y="133" width="65.4248%" height="15" fill="rgb(225,20,46)" fg:x="89451271603" fg:w="179336568773"/><text x="32.8832%" y="143.50">dijkstra::core::graph::DiGraphMap&lt;N,W&gt;::all_edges</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8,753,967,167 samples, 3.19%)</title><rect x="94.8644%" y="117" width="3.1936%" height="15" fill="rgb(210,31,41)" fg:x="260033873209" fg:w="8753967167"/><text x="95.1144%" y="127.50">all..</text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h8545f10734766a3fE.llvm.8361465681181521445 (8,085,397,196 samples, 2.95%)</title><rect x="95.1083%" y="101" width="2.9497%" height="15" fill="rgb(221,200,47)" fg:x="260702443180" fg:w="8085397196"/><text x="95.3583%" y="111.50">_Z..</text></g><g><title>realloc (7,285,391,734 samples, 2.66%)</title><rect x="95.4001%" y="85" width="2.6578%" height="15" fill="rgb(226,26,5)" fg:x="261502448642" fg:w="7285391734"/><text x="95.6501%" y="95.50">re..</text></g><g><title>[libc.so.6] (6,314,493,010 samples, 2.30%)</title><rect x="95.7543%" y="69" width="2.3036%" height="15" fill="rgb(249,33,26)" fg:x="262473347366" fg:w="6314493010"/><text x="96.0043%" y="79.50">[..</text></g><g><title>memcpy@plt (36,744,895 samples, 0.01%)</title><rect x="98.0446%" y="53" width="0.0134%" height="15" fill="rgb(235,183,28)" fg:x="268751095481" fg:w="36744895"/><text x="98.2946%" y="63.50"></text></g><g><title>dijkstra::algorithm::bellman_ford::bellman_ford (267,940,174,879 samples, 97.75%)</title><rect x="0.3225%" y="149" width="97.7487%" height="15" fill="rgb(221,5,38)" fg:x="884023266" fg:w="267940174879"/><text x="0.5725%" y="159.50">dijkstra::algorithm::bellman_ford::bellman_ford</text></g><g><title>malloc (36,357,769 samples, 0.01%)</title><rect x="98.0580%" y="133" width="0.0133%" height="15" fill="rgb(247,18,42)" fg:x="268787840376" fg:w="36357769"/><text x="98.3080%" y="143.50"></text></g><g><title>[libc.so.6] (36,357,769 samples, 0.01%)</title><rect x="98.0580%" y="117" width="0.0133%" height="15" fill="rgb(241,131,45)" fg:x="268787840376" fg:w="36357769"/><text x="98.3080%" y="127.50"></text></g><g><title>_ZN4rand3rng3Rng12random_range17he9e9abd6345a6251E.llvm.13483077168941055850 (430,205,210 samples, 0.16%)</title><rect x="98.1079%" y="133" width="0.1569%" height="15" fill="rgb(249,31,29)" fg:x="268924830711" fg:w="430205210"/><text x="98.3579%" y="143.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (193,168,936 samples, 0.07%)</title><rect x="98.1944%" y="117" width="0.0705%" height="15" fill="rgb(225,111,53)" fg:x="269161866985" fg:w="193168936"/><text x="98.4444%" y="127.50"></text></g><g><title>dijkstra::core::graph::DiGraphMap&lt;N,W&gt;::add_edge (663,673,997 samples, 0.24%)</title><rect x="98.2649%" y="133" width="0.2421%" height="15" fill="rgb(238,160,17)" fg:x="269355035921" fg:w="663673997"/><text x="98.5149%" y="143.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (567,418,278 samples, 0.21%)</title><rect x="98.3000%" y="117" width="0.2070%" height="15" fill="rgb(214,148,48)" fg:x="269451291640" fg:w="567418278"/><text x="98.5500%" y="127.50"></text></g><g><title>[unknown] (82,341,757 samples, 0.03%)</title><rect x="98.8143%" y="85" width="0.0300%" height="15" fill="rgb(232,36,49)" fg:x="270860929302" fg:w="82341757"/><text x="99.0643%" y="95.50"></text></g><g><title>dijkstra::core::graph::DiGraphMap&lt;N,W&gt;::add_node (1,048,031,001 samples, 0.38%)</title><rect x="98.5070%" y="133" width="0.3823%" height="15" fill="rgb(209,103,24)" fg:x="270018709918" fg:w="1048031001"/><text x="98.7570%" y="143.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (837,411,453 samples, 0.31%)</title><rect x="98.5838%" y="117" width="0.3055%" height="15" fill="rgb(229,88,8)" fg:x="270229329466" fg:w="837411453"/><text x="98.8338%" y="127.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17hb925a6023747e2d0E.llvm.95023787564841493 (677,827,338 samples, 0.25%)</title><rect x="98.6421%" y="101" width="0.2473%" height="15" fill="rgb(213,181,19)" fg:x="270388913581" fg:w="677827338"/><text x="98.8921%" y="111.50"></text></g><g><title>malloc (118,874,865 samples, 0.04%)</title><rect x="98.8460%" y="85" width="0.0434%" height="15" fill="rgb(254,191,54)" fg:x="270947866054" fg:w="118874865"/><text x="99.0960%" y="95.50"></text></g><g><title>[libc.so.6] (96,293,532 samples, 0.04%)</title><rect x="98.8542%" y="69" width="0.0351%" height="15" fill="rgb(241,83,37)" fg:x="270970447387" fg:w="96293532"/><text x="99.1042%" y="79.50"></text></g><g><title>dijkstra::core::graph::DiGraphMap&lt;N,W&gt;::contains_edge (1,030,038,630 samples, 0.38%)</title><rect x="98.8893%" y="133" width="0.3758%" height="15" fill="rgb(233,36,39)" fg:x="271066740919" fg:w="1030038630"/><text x="99.1393%" y="143.50"></text></g><g><title>[libc.so.6] (27,558,059 samples, 0.01%)</title><rect x="99.7896%" y="101" width="0.0101%" height="15" fill="rgb(226,3,54)" fg:x="273534408226" fg:w="27558059"/><text x="100.0396%" y="111.50"></text></g><g><title>dijkstra::core::generate_graph::generate_graph (5,214,429,990 samples, 1.90%)</title><rect x="98.0712%" y="149" width="1.9023%" height="15" fill="rgb(245,192,40)" fg:x="268824198145" fg:w="5214429990"/><text x="98.3212%" y="159.50">d..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,941,848,586 samples, 0.71%)</title><rect x="99.2651%" y="133" width="0.7084%" height="15" fill="rgb(238,167,29)" fg:x="272096779549" fg:w="1941848586"/><text x="99.5151%" y="143.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h25f3ce9bf962576fE.llvm.95023787564841493 (955,804,743 samples, 0.35%)</title><rect x="99.6248%" y="117" width="0.3487%" height="15" fill="rgb(232,182,51)" fg:x="273082823392" fg:w="955804743"/><text x="99.8748%" y="127.50"></text></g><g><title>malloc (431,011,293 samples, 0.16%)</title><rect x="99.8163%" y="101" width="0.1572%" height="15" fill="rgb(231,60,39)" fg:x="273607616842" fg:w="431011293"/><text x="100.0663%" y="111.50"></text></g><g><title>[libc.so.6] (376,217,314 samples, 0.14%)</title><rect x="99.8363%" y="85" width="0.1372%" height="15" fill="rgb(208,69,12)" fg:x="273662410821" fg:w="376217314"/><text x="100.0863%" y="95.50"></text></g><g><title>_start (274,019,032,405 samples, 99.97%)</title><rect x="0.0203%" y="293" width="99.9664%" height="15" fill="rgb(235,93,37)" fg:x="55743915" fg:w="274019032405"/><text x="0.2703%" y="303.50">_start</text></g><g><title>__libc_start_main (274,019,032,405 samples, 99.97%)</title><rect x="0.0203%" y="277" width="99.9664%" height="15" fill="rgb(213,116,39)" fg:x="55743915" fg:w="274019032405"/><text x="0.2703%" y="287.50">__libc_start_main</text></g><g><title>[libc.so.6] (274,019,032,405 samples, 99.97%)</title><rect x="0.0203%" y="261" width="99.9664%" height="15" fill="rgb(222,207,29)" fg:x="55743915" fg:w="274019032405"/><text x="0.2703%" y="271.50">[libc.so.6]</text></g><g><title>main (274,019,032,405 samples, 99.97%)</title><rect x="0.0203%" y="245" width="99.9664%" height="15" fill="rgb(206,96,30)" fg:x="55743915" fg:w="274019032405"/><text x="0.2703%" y="255.50">main</text></g><g><title>std::rt::lang_start_internal (274,019,032,405 samples, 99.97%)</title><rect x="0.0203%" y="229" width="99.9664%" height="15" fill="rgb(218,138,4)" fg:x="55743915" fg:w="274019032405"/><text x="0.2703%" y="239.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (274,019,032,405 samples, 99.97%)</title><rect x="0.0203%" y="213" width="99.9664%" height="15" fill="rgb(250,191,14)" fg:x="55743915" fg:w="274019032405"/><text x="0.2703%" y="223.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (274,019,032,405 samples, 99.97%)</title><rect x="0.0203%" y="197" width="99.9664%" height="15" fill="rgb(239,60,40)" fg:x="55743915" fg:w="274019032405"/><text x="0.2703%" y="207.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>dijkstra::main (274,019,032,405 samples, 99.97%)</title><rect x="0.0203%" y="181" width="99.9664%" height="15" fill="rgb(206,27,48)" fg:x="55743915" fg:w="274019032405"/><text x="0.2703%" y="191.50">dijkstra::main</text></g><g><title>dijkstra::core::statistics::run_algorithm (274,019,032,405 samples, 99.97%)</title><rect x="0.0203%" y="165" width="99.9664%" height="15" fill="rgb(225,35,8)" fg:x="55743915" fg:w="274019032405"/><text x="0.2703%" y="175.50">dijkstra::core::statistics::run_algorithm</text></g><g><title>all (274,111,200,790 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="274111200790"/><text x="0.2500%" y="335.50"></text></g><g><title>dijkstra (274,111,200,790 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="274111200790"/><text x="0.2500%" y="319.50">dijkstra</text></g></svg></svg>